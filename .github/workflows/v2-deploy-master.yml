name: V2 Deploy Master to Production Environment

on:
  workflow_run:
    workflows:
      - "V2 Build Master for Production Environment"
    types:
      - completed

permissions:
  actions: read
  pull-requests: write
  contents: read

concurrency:
  group: deploy-v2-demos-master-${{ github.event.workflow_run.head_branch }}
  cancel-in-progress: true

jobs:
  # Step 1: Prepare the build context
  prepare-build-context:
    if: github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Download Build Context
        uses: XanaduAI/cloud-actions/download-github-workflow-artifact@main
        with:
          workflow_run_id: ${{ github.event.workflow_run.id }}
          artifact_name_regex: '^master_build_context$'
          github_token: ${{ github.token }}

      - name: Check if Build Context file exists
        id: build_context
        env:
          context_artifact_file_name: master_build_context.zip
        run: |
          if test -f "$context_artifact_file_name"; then
            echo "result=$context_artifact_file_name" >> $GITHUB_OUTPUT
          fi

      - name: Unpack Build Information
        if: steps.build_context.outputs.result != ''
        run: unzip ${{ steps.build_context.outputs.result }}

      - name: Read Build Information
        id: read_build_info
        if: steps.build_context.outputs.result != ''
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const buildData = fs.readFileSync('master_build_context.json', 'utf8');
            return JSON.parse(buildData);

      - name: Parse Push Event Information
        id: pr_info
        if: github.event.workflow_run.event == 'push' && steps.build_context.outputs.result != ''
        run: |
          echo '${{ steps.read_build_info.outputs.result }}' | jq -r '.ref' > merge_ref.txt
          echo '${{ steps.read_build_info.outputs.result }}' | jq -c '.updated_demos' > updated_demos.json
          echo '${{ steps.read_build_info.outputs.result }}' | jq -c '.deleted_demos' > deleted_demos.json

          echo "merge_ref=$(cat merge_ref.txt)" >> $GITHUB_OUTPUT
          echo "updated_demos=$(cat updated_demos.json)" >> $GITHUB_OUTPUT
          echo "deleted_demos=$(cat deleted_demos.json)" >> $GITHUB_OUTPUT
    outputs:
      merge_ref: ${{ steps.pr_info.outputs.merge_ref }}
      updated_demos: ${{ steps.pr_info.outputs.updated_demos }}
      deleted_demos: ${{ steps.pr_info.outputs.deleted_demos }}

  # Step 2: Deploy the demos to SWC production environment
  deploy-production-demos:
    if: |
      github.event.workflow_run.event == 'push' &&
      needs.prepare-build-context.result == 'success' &&
      needs.prepare-build-context.outputs.merge_ref != ''
    uses: ./.github/workflows/v2-deploy-demos.yml
    needs: prepare-build-context
    with:
      # Change to 'swc-prod' when ready for release
      environment: 'swc-dev' 
      artifact-name: demo-master-build-${{ needs.prepare-build-context.outputs.merge_ref }}
      workflow-run-id: ${{ github.event.workflow_run.id }}
      pr_number: 0
    secrets: inherit
