name: Build Website - JSON
on:
  push:
    branches:
      - master
      - dev

concurrency:
  group: build-json-doc-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    uses: ./.github/workflows/build-branch.yml
    with:
      branch: ${{ github.ref }}
      num_workers: 10
      enable_python_cache: false
      enable_sphinx_cache: false
      enable_qml_execution_times_cache: false
      skip_execution_times_aggregation: true
      skip_sphinx_build_file_aggregation: false
      sphinx_build_output_format: json

  upload:
    runs-on: ubuntu-latest

    needs:
      - build

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download HTML
        id: qml_json
        uses: actions/download-artifact@v3
        with:
          name: json.zip
          path: qml_json

      - name: Copy Metadata into Build
        run: |
          mkdir ${{ steps.qml_json.outputs.download-path }}/metadata
          find demonstrations -name "*.metadata.json" -type f | xargs cp -vt ${{ steps.qml_json.outputs.download-path }}/metadata

      - name: Set Upload Info
        id: upload_info
        env:
          INFRA_ENV: ${{ github.ref_name == 'master' && 'PROD' || 'DEV' }}
        run: |
          AWS_REGION=${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID=${{ secrets[format('PL_SITE_{0}_NON_REACT_ACCESS_KEY_ID', env.INFRA_ENV)] }}
          AWS_SECRET_ACCESS_KEY=${{ secrets[format('PL_SITE_{0}_NON_REACT_SECRET_ACCESS_KEY', env.INFRA_ENV)] }}
          AWS_S3_BUCKET_ID=${{ secrets[format('PL_SITE_{0}_QML_JSON_S3_BUCKET_ID', env.INFRA_ENV)] }}
          AWS_S3_BUCKET_DIR='commits/${{ github.ref_name }}-${{ github.sha }}'
          
          echo "aws_region=$AWS_REGION" >> $GITHUB_OUTPUT
          echo "aws_access_key_id=$AWS_ACCESS_KEY_ID" >> $GITHUB_OUTPUT
          echo "aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" >> $GITHUB_OUTPUT
          echo "aws_s3_bucket_id=$AWS_S3_BUCKET_ID" >> $GITHUB_OUTPUT
          echo "aws_s3_bucket_dir=$AWS_S3_BUCKET_DIR" >> $GITHUB_OUTPUT

      - name: Upload
        uses: XanaduAI/cloud-actions/push-to-s3-and-invalidate-cloudfront@main
        with:
          build-directory: qml_json
          aws-cloudfront-distribution-id: ''
          aws-region: ${{ steps.upload_info.outputs.aws_region }}
          aws-access-key-id: ${{ steps.upload_info.outputs.aws_access_key_id }}
          aws-secret-access-key: ${{ steps.upload_info.outputs.aws_secret_access_key }}
          s3-bucket: ${{ steps.upload_info.outputs.aws_s3_bucket_id }}
          s3-directory: ${{ steps.upload_info.outputs.aws_s3_bucket_dir }}
          s3-delete-stale-files: true
          s3-action: upload
          invalidate-cloudfront-cache: false

      - name: Set as latest upload
        env:
          AWS_REGION: ${{ steps.upload_info.outputs.aws_region }}
          AWS_ACCESS_KEY_ID: ${{ steps.upload_info.outputs.aws_access_key_id }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.upload_info.outputs.aws_secret_access_key }}
          AWS_S3_BUCKET_ID: ${{ steps.upload_info.outputs.aws_s3_bucket_id }}
          AWS_S3_BUCKET_DIR: ${{ steps.upload_info.outputs.aws_s3_bucket_dir }}
        run: aws s3 sync s3://$AWS_S3_BUCKET_ID/$AWS_S3_BUCKET_DIR s3://$AWS_S3_BUCKET_ID/${{ github.ref_name }} --delete

  # Though this job only has one step to trigger a build in the pennylane.ai React repository, it has to be a separate
  # job since we need the previous two to be successful before this can be done.
  trigger-website-build:
    runs-on: ubuntu-latest

    needs:
      - build
      - upload

    steps:
      - name: Trigger Website Build
        uses: peter-evans/repository-dispatch@v2
        env:
          INFRA_ENV: ${{ github.ref_name == 'master' && 'PROD' || 'DEV' }}
          EVENT_NAME: build-pl-site-${{ github.ref_name == 'master' && 'main' || 'dev' }}
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        with:
          token: ${{ secrets[format('PL_SITE_{0}_QML_REACT_PAT', env.INFRA_ENV)] }}
          repository: XanaduAI/pennylane.ai-react
          event-type: ${{ env.EVENT_NAME }}
          client-payload: '{"source_ref": "${{ github.ref_name }}", "source_sha": "${{ github.sha }}", "source_run_url": "${{ env.RUN_URL }}"}'
