name: Deploy Website
on:
  workflow_run:
    workflows:
      - Build Website
    types:
      - completed

jobs:
  deploy:
    runs-on: ubuntu-20.04
    if: github.event.workflow_run.event == 'pull_request' && github.event.workflow_run.conclusion == 'success'
    steps:
      - name: Download PR Info
        uses: actions/github-script@v6
        with:
          script: |
            let artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id
            });
            let prArtifact = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name == 'pr_info.zip'
            })[0];
            let download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: prArtifact.id,
              archive_format: 'zip'
            });
            let fs = require('fs');
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/pr_info.zip`, Buffer.from(download.data));

      - name: Unpack PR Info
        run: |
          unzip pr_info.zip

      - name: Read PR Info
        id: read_pr_info
        uses: actions/github-script@v6
        with:
          script: |
            let fs = require('fs');
            const prData = fs.readFileSync('pr_info.json');
            return JSON.parse(prData);

      - name: Parse PR Info
        id: pr_info
        run: |
          PR_ID=$(echo '${{ steps.read_pr_info.outputs.result }}' | jq '.id')
          PR_ID_NO_QUOTE="${PR_ID%\"}"
          PR_ID_NO_QUOTE="${PR_ID_NO_QUOTE#\"}"
          echo "::set-output name=pr_id::$PR_ID_NO_QUOTE"
          echo "::set-output name=pr_site::https://${{ secrets.AWS_WEBSITE }}/${{ secrets.AWS_BUCKET_BUILD_DIR }}/$PR_ID_NO_QUOTE/index.html"
          
          PR_REF=$(echo '${{ steps.read_pr_info.outputs.result }}' | jq '.ref')
          PR_REF_NO_QUOTE="${PR_REF%\"}"
          PR_REF_NO_QUOTE="${PR_REF_NO_QUOTE#\"}"
          echo "::set-output name=pr_ref::$PR_REF_NO_QUOTE"
          
          PR_REF_NAME=$(echo '${{ steps.read_pr_info.outputs.result }}' | jq '.ref_name')
          PR_REF_NAME_NO_QUOTE="${PR_REF_NAME%\"}"
          PR_REF_NAME_NO_QUOTE="${PR_REF_NAME_NO_QUOTE#\"}"
          echo "::set-output name=pr_ref_name::$PR_REF_NAME_NO_QUOTE"
          

      - name: Create Deployment
        id: deployment
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            const deploymentStage = 'in_progress';
            
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: '${{ steps.pr_info.outputs.pr_ref }}',
              environment: 'preview',
              task: 'deploy:pr-${{ steps.pr_info.outputs.pr_id }}',
              transient_environment: true,
              auto_merge: false,
              description: `QML doc deployment from pull request ${{ steps.pr_info.outputs.pr_id }}`
            });
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: deploymentStage,
              log_url: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}',
              environment_url: '${{ steps.pr_info.outputs.pr_site }}'
            });
            return deployment.data.id

      - name: Download HTML
        uses: actions/github-script@v6
        with:
          script: |
            let fs = require('fs');
            let artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id
            });
            let htmlArtifacts = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name.startsWith('html-')
            });
            for (const artifact of htmlArtifacts) {
              let download = await github.rest.actions.downloadArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
                archive_format: 'zip'
              });
              fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/${artifact.name}`, Buffer.from(download.data));
            }

      - name: Unpack HTML
        run: |
          mkdir -p website/demos
          for f in html-*.zip; do
            unzip -o -d website $f
          done

      - name: Upload HTML
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run:
          aws s3 sync website s3://${{ secrets.AWS_BUCKET_ID }}/${{ secrets.AWS_BUCKET_BUILD_DIR }}/${{ steps.pr_info.outputs.pr_id }}/ --delete

      - name: Comment on PR
        uses: actions/github-script@v6
        with:
          script: |
            const actionsBotUserId = 41898282;
            const prNumber = ${{ steps.pr_info.outputs.pr_id }};
            const commentHeader = '**Thank you for opening this pull request.**'
            const commentBody = `   
            You can find the built site [at this link](${{ steps.pr_info.outputs.pr_site }}).
            
            **Deployment Info:**
            - Pull Request ID: \`${{ steps.pr_info.outputs.pr_id }}\`
            - Deployment SHA: \`${{ steps.pr_info.outputs.pr_ref }}\`
            (The \`Deployment SHA\` refers to the latest commit hash the docs were built from)
            
            **Note:** It may take several minutes for updates to this pull request to be reflected on the deployed site.
            `;
            const commentText = `
            ${commentHeader}
            
            ${commentBody}
            `;
            
            // Get the existing comments.
            const {data: comments} = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber
            });
            
            // Find any comment already made by the bot.                                                                                                    
            const botComment = comments.find(comment => comment.user.id === actionsBotUserId && comment.body.trim().startsWith(commentHeader));
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentText
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: commentText
              });
            }

      - name: Update Deployment (success)
        if: success()
        uses: actions/github-script@v6
        env:
          DEPLOYMENT_STAGE: success
          DEPLOYMENT_ID: ${{ steps.deployment.outputs.result }}
        with:
          script: |
            const deploymentId = process.env.DEPLOYMENT_ID
            const deploymentEnv = process.env.DEPLOYMENT_ENV;
            const deploymentStage = process.env.DEPLOYMENT_STAGE;
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deploymentId,
              state: deploymentStage,
              log_url: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}',
              environment_url: '${{ steps.pr_info.outputs.pr_site }}'
            });

      - name: Update Deployment (failure)
        if: failure()
        uses: actions/github-script@v6
        env:
          DEPLOYMENT_STAGE: failure
          DEPLOYMENT_ID: ${{ steps.deployment.outputs.result }}
        with:
          script: |
            const deploymentId = process.env.DEPLOYMENT_ID
            const deploymentEnv = process.env.DEPLOYMENT_ENV;
            const deploymentStage = process.env.DEPLOYMENT_STAGE;
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deploymentId,
              state: deploymentStage,
              log_url: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}',
              environment_url: '${{ steps.pr_info.outputs.pr_site }}'
            });
