name: Deploy Website
on:
  workflow_run:
    workflows:
      - Build Website
    types:
      - completed

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    steps:
      - name: Set Build Context File Prefix
        id: build_context_file_prefix
        run: |
          if [[ "${{ github.event.workflow_run.event }}" == "pull_request" ]]; then
            echo "build_context_prefix=pr" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.workflow_run.event }}" == "push" ]]; then
            echo "build_context_prefix=push" >> $GITHUB_OUTPUT
          fi
      
      - name: Download Build Context
        uses: XanaduAI/cloud-actions/download-github-workflow-artifact@main
        with:
          workflow_run_id: ${{ github.event.workflow_run.id }}
          artifact_name_regex: '^${{ steps.build_context_file_prefix.outputs.build_context_prefix }}_info\.zip'
          github_token: ${{ github.token }}

      # If file is missing, then likely the PR build was skipped
      - name: Check if Build Context file exists
        id: build_context
        env:
          context_artifact_file_name: ${{ steps.build_context_file_prefix.outputs.build_context_prefix }}_info.zip.zip
        run: |
          if test -f "$context_artifact_file_name"; then
            echo "result=$context_artifact_file_name" >> $GITHUB_OUTPUT
          fi

      - name: Unpack Build Information
        if: steps.build_context.outputs.result != ''
        run: |
          unzip ${{ steps.build_context.outputs.result }}

      - name: Read Build Information
        id: read_build_info
        if: steps.build_context.outputs.result != ''
        uses: actions/github-script@v6
        with:
          script: |
            let fs = require('fs');
            const workflowContextFilePrefix = process.env.build_context_prefix;
            const buildData = fs.readFileSync(`${workflowContextFilePrefix}_info.json`);
            return JSON.parse(buildData);

      - name: Parse Pull Request Event Information
        id: pr_info
        if: github.event.workflow_run.event == 'pull_request' && steps.build_context.outputs.result != ''
        run: |
          PR_ID=$(echo '${{ steps.read_build_info.outputs.result }}' | jq '.id')
          PR_ID_NO_QUOTE="${PR_ID%\"}"
          PR_ID_NO_QUOTE="${PR_ID_NO_QUOTE#\"}"
          echo "pr_id => $PR_ID_NO_QUOTE"
          echo "pr_id=$PR_ID_NO_QUOTE" >> $GITHUB_OUTPUT
          echo "pr_site=https://${{ secrets.AWS_WEBSITE }}/${{ secrets.AWS_PR_BUCKET_BUILD_DIR }}/$PR_ID_NO_QUOTE/demonstrations.html" >> $GITHUB_OUTPUT
     
          PR_REF=$(echo '${{ steps.read_build_info.outputs.result }}' | jq '.ref')
          PR_REF_NO_QUOTE="${PR_REF%\"}"
          PR_REF_NO_QUOTE="${PR_REF_NO_QUOTE#\"}"
          echo "pr_ref => $PR_REF_NO_QUOTE"
          echo "pr_ref=$PR_REF_NO_QUOTE" >> $GITHUB_OUTPUT
          
          PR_REF_NAME=$(echo '${{ steps.read_build_info.outputs.result }}' | jq '.ref_name')
          PR_REF_NAME_NO_QUOTE="${PR_REF_NAME%\"}"
          PR_REF_NAME_NO_QUOTE="${PR_REF_NAME_NO_QUOTE#\"}"
          echo "pr_ref_name => $PR_REF_NAME_NO_QUOTE"
          echo "pr_ref_name=$PR_REF_NAME_NO_QUOTE" >> $GITHUB_OUTPUT

      - name: Parse Push Event Information
        id: push_info
        if: github.event.workflow_run.event == 'push' && steps.build_context.outputs.result != ''
        run: |
          PUSH_REF=$(echo '${{ steps.read_build_info.outputs.result }}' | jq '.ref')
          PUSH_REF_NO_QUOTE="${PUSH_REF%\"}"
          PUSH_REF_NO_QUOTE="${PUSH_REF_NO_QUOTE#\"}"
          echo "push_ref => $PUSH_REF_NO_QUOTE"
          echo "push_ref=$PUSH_REF_NO_QUOTE" >> $GITHUB_OUTPUT

          PUSH_REF_NAME=$(echo '${{ steps.read_build_info.outputs.result }}' | jq '.ref_name')
          PUSH_REF_NAME_NO_QUOTE="${PUSH_REF_NAME%\"}"
          PUSH_REF_NAME_NO_QUOTE="${PUSH_REF_NAME_NO_QUOTE#\"}"
          echo "push_ref_name_raw => $PUSH_REF_NAME_NO_QUOTE"
          echo "push_ref_name_raw=$PUSH_REF_NAME_NO_QUOTE" >> $GITHUB_OUTPUT

          BRANCH_NAME=${PUSH_REF_NAME_NO_QUOTE#refs/heads/}
          BRANCH_NAME_FORMATTED=${BRANCH_NAME^^}
          echo "push_ref_name => $BRANCH_NAME_FORMATTED"
          echo "push_ref_name=$BRANCH_NAME_FORMATTED" >> $GITHUB_OUTPUT

      - name: Create GitHub Deployment
        id: deployment
        if: github.event.workflow_run.event == 'pull_request' && steps.build_context.outputs.result != ''
        uses: XanaduAI/cloud-actions/manage-gh-deployments@main
        with:
          environment: preview
          deployment_stage: in_progress
          deployment_ref: ${{ steps.pr_info.outputs.pr_ref }}
          deployment_description: QML doc deployment from pull request ${{ steps.pr_info.outputs.pr_id }}
          deployment_log_url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          deployment_url: ${{ steps.pr_info.outputs.pr_site }}

      - name: Download HTML
        if: steps.build_context.outputs.result != ''
        uses: XanaduAI/cloud-actions/download-github-workflow-artifact@main
        with:
          workflow_run_id: ${{ github.event.workflow_run.id }}
          artifact_name_regex: ^html\-.*$
          github_token: ${{ github.token }}

      - name: Unpack HTML
        if: steps.build_context.outputs.result != ''
        run: |
          mkdir -p website/demos
          for f in html-*.zip; do
            unzip -o -d website $f
          done

      - name: Upload HTML (Pull Request)
        if: github.event.workflow_run.event == 'pull_request' && steps.build_context.outputs.result != ''
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run:
          aws s3 sync website s3://${{ secrets.AWS_PR_S3_BUCKET_ID }}/${{ secrets.AWS_PR_BUCKET_BUILD_DIR }}/${{ steps.pr_info.outputs.pr_id }}/ --delete

      - name: Upload HTML (Push to master / dev)
        if: github.event.workflow_run.event == 'push' && steps.build_context.outputs.result != ''
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          BUCKET_ACTIONS_ID: ${{ format('AWS_ENV_S3_BUCKET_{0}', steps.push_info.outputs.push_ref_name) }}
        run: |
          echo "Got actions Bucket ID: ${{ env.BUCKET_ACTIONS_ID }}"
          AWS_BUCKET_NAME=${{ secrets[env.BUCKET_ACTIONS_ID] }}
          aws s3 sync website s3://$AWS_BUCKET_NAME/qml/ --delete

      - name: Upload HTML (dev)
        if: github.event.workflow_run.event == 'push' && steps.push_info.outputs.push_ref_name == 'dev' && steps.build_context.outputs.result != ''
        uses: XanaduAI/cloud-actions/push-to-s3-and-invalidate-cloudfront@main
        with:
          build-directory: website
          aws-cloudfront-distribution-id: ${{ secrets.PL_SITE_DEV_NON_REACT_CLOUDFRONT_DISTRIBUTION_ID }}
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.PL_SITE_DEV_NON_REACT_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PL_SITE_DEV_NON_REACT_SECRET_ACCESS_KEY }}
          s3-bucket: ${{ secrets.PL_SITE_DEV_S3_BUCKET_NAME }}
          s3-directory: qml
          s3-delete-stale-files: true
          s3-action: upload
          invalidate-cloudfront-cache: true

      - name: Upload HTML (prod)
        if: github.event.workflow_run.event == 'push' && steps.push_info.outputs.push_ref_name == 'master' && steps.build_context.outputs.result != ''
        uses: XanaduAI/cloud-actions/push-to-s3-and-invalidate-cloudfront@main
        with:
          build-directory: website
          aws-cloudfront-distribution-id: ${{ secrets.PL_SITE_PROD_NON_REACT_CLOUDFRONT_DISTRIBUTION_ID }}
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.PL_SITE_PROD_NON_REACT_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PL_SITE_PROD_NON_REACT_SECRET_ACCESS_KEY }}
          s3-bucket: ${{ secrets.PL_SITE_PROD_S3_BUCKET_NAME }}
          s3-directory: qml
          s3-delete-stale-files: true
          s3-action: upload
          invalidate-cloudfront-cache: true

      - name: Comment on PR
        if: github.event.workflow_run.event == 'pull_request' && steps.build_context.outputs.result != ''
        uses: XanaduAI/cloud-actions/create-and-update-pull-request-comment@main
        with:
          github_token: ${{ github.token }}
          pull_request_number: ${{ steps.pr_info.outputs.pr_id }}
          comment_body: |
            **Thank you for opening this pull request.**
            
            You can find the built site [at this link](${{ steps.pr_info.outputs.pr_site }}).
            
            **Deployment Info:**
            - Pull Request ID: \`${{ steps.pr_info.outputs.pr_id }}\`
            - Deployment SHA: \`${{ steps.pr_info.outputs.pr_ref }}\`
            (The \`Deployment SHA\` refers to the latest commit hash the docs were built from)
            
            **Note:** It may take several minutes for updates to this pull request to be reflected on the deployed site.

      - name: Update Deployment (success)
        if: success() && github.event.workflow_run.event == 'pull_request' && steps.build_context.outputs.result != ''
        uses: XanaduAI/cloud-actions/manage-gh-deployments@main
        with:
          environment: preview
          deployment_stage: success
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          deployment_ref: ${{ steps.pr_info.outputs.pr_ref }}
          deployment_description: QML doc deployment from pull request ${{ steps.pr_info.outputs.pr_id }}
          deployment_log_url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          deployment_url: ${{ steps.pr_info.outputs.pr_site }}

      - name: Update Deployment (failure)
        if: failure() && github.event.workflow_run.event == 'pull_request' && steps.build_context.outputs.result != ''
        uses: XanaduAI/cloud-actions/manage-gh-deployments@main
        with:
          environment: preview
          deployment_stage: failure
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          deployment_ref: ${{ steps.pr_info.outputs.pr_ref }}
          deployment_description: QML doc deployment from pull request ${{ steps.pr_info.outputs.pr_id }}
          deployment_log_url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          deployment_url: ${{ steps.pr_info.outputs.pr_site }}
