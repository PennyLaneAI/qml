r"""
Unitary synthesis with recursive KAK decompositions
===================================================
    
Unitary synthesis is an essential tool to break up a given matrix into quantum gates
that can be implemented on hardware.
Research efforts to obtain cheap decompositions for unitary synthesis have been going on
for at least 25 years, successively reducing the gate counts and/or depth of the synthesized
circuits.

.. figure:: ../_static/demo_thumbnails/opengraph_demo_thumbnails/OGthumbnail_unitary_synthesis_kak.png
    :align: center
    :width: 70%
    :target: javascript:void(0)

In this demo we will take a look at three unitary synthesis techniques:
(one of) the first results proving universality of one-qubit and two-qubit gates for arbitrary
unitaries [#Khaneja_Glaser]_, the probably most widely-known Quantum Shannon Decomposition (QSD)
[#Shende_QSD]_, and the Block-ZXZ decomposition [#Krol_BlockZXZ]_ that currently holds the record
for lowest CNOT count for any number of qubits.
Crucially, we will not just go through these three techniques separately, but we will explain
how they are variants of the same underlying mathematical factorization, which is called 
a recursive KAK, or Cartan, decomposition [#Wierichs_CartanSynthesis]_.
One of the recursion steps will be implemented by a Cosine-Sine Decomposition (CSD), maybe the
most well-known KAK decomposition.

We recommend that readers first familiarize themselves with KAK decompositions,
for example using :doc:`our introductory demo </demos/tutorial_kak_decomposition>` or our
:doc:`demo on compiling Hamiltonian simulation variationally
</demos/tutorial_fixed_depth_hamiltonian_simulation_via_cartan_decomposition>`
following [#Kökcü_FDHS]_.


KAK decompositions
------------------

A KAK, or Cartan, decomposition of a matrix Lie group :math:`\mathcal{G}` with respect to a 
Lie subgroup :math:`mathcal{K}` allows us to factorize any group element :math:`G\in\mathcal{G}` into
:math:`K_1 A K_2`, where :math:`K_1,K_2\in\mathcal{K}` and :math:`A` lies in a so-called
Cartan subgroup :math:`mathcal{A}`.
In a circuit, we would draw such a factorization as

.. figure:: ../_static/demonstration_assets/unitary_synthesis_kak/KAK_generic.png
   :align: center
   :width: 50%
   :alt: Quantum circuit of a generic KAK decomposition.

To understand the nature of the matrix :math:`mathcal{A}`, consider the Lie algebra
:math:`mathfrak{g}` of the group :math:`mathcal{G}` together with the algebra :math:`mathfrak{k}`
of :math:`mathcal{K}`, which is a subalgebra of :math:`\mathfrak{g}`. The orthogonal complement
of :math:`mathfrak{k}` within :math:`mathfrak{g}` is the so-called *horizontal space*,
:math:`mathfrak{p}`. A *(horizontal) Cartan subalgebra* :math:`mathfrak{a}` then is any maximal
Abelian subalgebra of :math:`mathfrak{p}` and the Cartan subgroup :math:`mathcal{A}` simply
is the (Abelian) group generated by :math:`mathfrak{a}` (via the exponential map).

Note that there are (infinitely) many possible choices for :math:`mathfrak{a}` and thus
for :math:`mathcal{A}`, and for each choice, the KAK decomposition exists.
Also note that the KAK decomposition is a statement of *existence*, so it is still up to us to
actually find the matrices :math:`K_1`, :math:`A`, and :math:`K_2` for a given matrix :math:`G`.

There is a full classification of KAK decompositions, based on the groups
:math:`\mathcal{G}` and :math:`\mathcal{K}`. For unitary total groups, we have four types:

.. rst-class:: docstable

    +---------------------+-------------------------+---------------+---------------+--------------------------+
    | .. centered::       | .. centered::           | .. centered:: | .. centered:: | .. centered::            |
    | Type                | A                       | AI            | AII           | AIII:math:`{}_{p,q}`     |
    +=====================+=========================+===============+===============+==========================+
    | :math:`\mathcal{G}` | :math:`U(d)\times U(d)` | :math:`U(d)`  | :math:`U(2d)` | :math:`U(p+q)`           |
    +---------------------+-------------------------+---------------+---------------+--------------------------+
    | :math:`\mathcal{K}` | :math:`U(d)`            | :math:`SO(d)` | :math:`Sp(d)` | :math:`U(p)\times U(q)`  |
    +---------------------+-------------------------+---------------+---------------+--------------------------+
    | rank                | :math:`d`               | :math:`d`     | :math:`d`     | :math:`\text{min}(p, q)` |
    +---------------------+-------------------------+---------------+---------------+--------------------------+

    Classification of KAK decompositions of the unitary group. Traditionally, they are defined
    on the special unitary group, which we have extended here by a global phase.

In the following, we will only use Cartan decompositions of type AIII or of type A, with
a small exception of type AI for the Khaneja-Glaser decomposition. We follow Sec. IID and App. B
of [#Wierichs_CartanSynthesis]_ and work with the unitary, rather than the special unitary group,
throughout. While a Cartan decomposition of :math:`U(d)=SU(d)\times U(1)` technically is not
classified, Observation 1 in [#Wierichs_CartanSynthesis]_ allows us to extend a decomposition
of :math:`SU(d)` to :math:`U(d)`. It turns out that multiple technicalities become simpler when
by this.
Now let us look at those typed decompositions in detail.

Type-AIII decomposition
-----------------------

A type-AIII Cartan decomposition is defined for the unitary group :math:`U(d)` in any
dimension :math:`d` and has a parameter :math:`p`, :math:`0\leq p\leq d`, that characterizes
the subgroup :math:`mathcal{K}`. Here we will only look at qubit systems (:math:`d=2^n` for :math:`n`
qubits) and a particularly regular choice for :math:`p` (:math:`p=d/2=2^{n-1}`), corresponding to 
:math:`mathcal{K}=U(2^{n-1})^{\times 2}`.
In principle, there are many ways to embed this subgroup :math:`mathcal{K}` in the standard
representation of :math:`\mathcal{G}=U(d)` (i.e., in the representation as :math:`d\times d`
matrices with :math:`U^\dagger U=\mathbb{I}`) but we
will only use what's maybe the most straightforward embedding, namely as block-diagonal matrices:

.. math::

    \mathcal{K}=U(2^{n-1})^{\times 2}
    \cong\left\{\begin{pmatrix} A & 0 \\ 0 & B \end{pmatrix}\bigg| A, B\in U(2^{n-1})\right\}.

Note that such a block-diagonal matrix can also be written as :math:`A\oplus B`.
In a quantum circuit, such a block-diagonal matrix is implemented by a *multiplexer*, or *Select*
operator (also see :class:`~.pennylane.Select`). Using the first qubit as most significant bit,
an element from :math:`mathcal{K}` can be drawn like the following:

.. figure:: ../_static/demonstration_assets/unitary_synthesis_kak/single_multiplexer.png
   :align: center
   :width: 85%
   :alt: Block-diagonal unitary gate, also called multiplexer or Select operator.

The horizontal subspace for this decomposition is

.. math:: 

    \mathfrak{p}_{\text{AIII}} = \mathfrak{k}^\perp
    =\left\{\begin{pmatrix} 0 & C \\ -C^\dagger & 0 \end{pmatrix}\bigg| C \in \mathbb{C}^{2^{n-1}\times 2^{n-1}}\right\},

and a valid Cartan subalgebra will be any :math:`2^{n-1}`-dimensional Abelian subalgebra
:math:`\mathfrak{a}\subset\mathfrak{p}`.
For example, we may choose

.. math::

    \mathfrak{a}_{\text{AIII}}
    =\left\{\begin{pmatrix} 0 & d \\ -d & 0 \end{pmatrix}\bigg| d \in \mathfrak{u}_{\text{diag}}(2^{n-1})\right\},

which is spanned by the basis elements :math:`\{iY\otimes |j\rangle\!\langle j|\}`.
Here we denoted by :math:`\mathfrak{u}_{\text{diag}}` the Abelian algebra of diagonal purely
imaginary matrices, a subalgebra of :math:`\mathfrak{u}`.

We observe that the generators in this Cartan subalgebra will lead to an independent Pauli
:math:`Y` rotation on the first qubit for every computational basis state of all other qubits.
This is again a Select operator, or multiplexer, which in this case also is referred to as a
uniformly controlled rotation. We may draw it as

.. figure:: ../_static/demonstration_assets/unitary_synthesis_kak/AIII_generic_CSG.png
   :align: center
   :width: 80%
   :alt: Cartan subgroup element implemented as Select, or multiplexed, operator. Also called uniformly controlled rotation.

Later on, we will also consider other Cartan subalgebras for this decomposition, which differ
from :math:`\mathfrak{a}_{\text{AIII}}` by some simple basis rotations.

The full KAK decomposition of type AIII with the choices and representations from above is given
by the following circuit diagram:

.. figure:: ../_static/demonstration_assets/unitary_synthesis_kak/AIII_generic_complete.png
   :align: center
   :width: 70%
   :alt: Generic type-AIII KAK decomposition of the unitary group on n qubits.

Implementation: Cosine-Sine decomposition
+++++++++++++++++++++++++++++++++++++++++

We have not yet discussed how one can obtain the block-diagonal matrices :math:`K_1`, :math:`K_2`
and the Cartan subgroup element :math:`A` for a given matrix :math:`G\in U(2^n)`.
Luckily, as has been observed repeatedly in the literature, the Cosine-Sine Decomposition (CSD)
implements a generalized type-AIII Cartan decomposition that allows to use distinct subgroups
:math:`U(p_1)\times U(n-p_1)` and :math:`U(p_2)\times U(n-p_2)` for :math:`K_1` and :math:`K_2`.
Here we will not care for the generalization and fix :math:`p_1=p_2=2^{n-1}`.

The CSD, as implemented for example in 
`scipy.linalg.cossin <https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.cossin.html>`__
with the setting ``separate=True``, then computes the blocks for the block-diagonal matrices as well
as the coefficients, or rotation angles, for :math:`A\in\exp(\mathfrak{a}_{\text{AIII}})`.

[CODE]: Could add an implementation, drawing from QSD implementation in PL and/or KAK tools repo.

If a different Cartan subalgebra is chosen, a suitable rotation needs to be applied. This is
usually a matter of right(left)-multiplying :math:`K_1` (:math:`K_2`) by the rotation and
re-interpreting the obtained angles to parametrize the new Cartan subgroup element already.

[EXAMPLE?]

Type-A decomposition
--------------------

A type-A Cartan decomposition is defined for the "doubled" unitary group 
:math:`\mathcal{G}=U(d)^{\times 2}` and its subgroup :math:`\mathcal{K}=U(d)`.
As you may anticipate, we still only care about qubit space dimensions, :math:`d=2^n`, for some 
qubit count :math:`n`.
Generically, we may use the representation of :math:`\mathcal{G}` as block-diagonal matrices
from above, and we will use the representation

.. math::

    \mathcal{K}=U(2^n)
    \cong\left\{\begin{pmatrix} A & 0 \\ 0 & A \end{pmatrix}\bigg| A\in U(2^n)\right\}
    =\left{\mathbb{I}_2 \otimes A | A\in U(2^n)\right\}

for the subgroup.
Note that in a quantum circuit, such an element :math:`\mathbb{I}_2\otimes A\in\mathcal{K}` 
simply is the gate :math:`A` acting on all but the first qubit.

As :math:`\mathcal{K}` is generated by matrices that do the same in the two diagonal blocks,
the complementary horizontal space accordingly consists of elements that do the opposite
in the two blocks,

.. math:: 

    \mathfrak{p} = \mathfrak{k}^\perp
    =\left\{\begin{pmatrix} C & 0 \\ 0 & -C \end{pmatrix}\bigg| C \in mathfrak{u}(2^n)\right\}.

A valid Cartan subalgebra is then any Abelian subalgebra of :math:`\mathfrak{p}` with dimension
:math:`2^n`.
A particularly simple choice that will be important for us is

.. math::

    \mathfrak{a}_{\text{A}}
    =\left\{\begin{pmatrix} d & 0 \\ 0 & -d \end{pmatrix}\bigg| d \in \mathfrak{u}_{\text{diag}}(2^n)\right\},

which is exactly of the form of :math:`\mathfrak{a}_{\text{AIII}}` except for a basis
change from Pauli :math:`Y` to Pauli :math:`Z`.
We thus may draw the complete type-A decomposition using :math:`\mathfrak{a}_{\text{A}}` as

.. figure:: ../_static/demonstration_assets/unitary_synthesis_kak/A_generic_complete.png
   :align: center
   :width: 70%
   :alt: Generic type-A KAK decomposition of the doubled unitary group on n-1 qubits.

Implementation: Demultiplexing
++++++++++++++++++++++++++++++

As for the type-AIII KAK decomposition above, we will need a numerical method that computes the
matrices :math:`K_1, K_2\in\mathbb{I}\otimes U(2^{n-1})` and 
:math:`A\in\exp(\mathfrak{a}_{\text{A}})` for the type-A decomposition. Luckily, this can be done
with a standard eigenvalue decomposition and some additional matrix manipulations [#Shende_QSD]_.

Consider the block-diagonal matrix :math:`G=U\oplus V` and compute :math:`\delta=UV^\dagger\in U(2^{n-1})`.
An eigenvalue decomposition of :math:`\delta` then yields :math:`\delta=U_1 D^2 U_1^\dagger`
with :math:`U_1\in U(2^{n-1})` and :math:`D^2` a diagonal unitary. Then we may compute any
square root of :math:`D` and define :math:`U_2=D U_1^\dagger V`, which again is unitary.
And with this, we already found our type-A Cartan decomposition:

.. math::

    (\mathbb{I}\otimes U_1) (D\oplus D^\dagger) (\mathbb{I}\otimes U_2)
    =(\underset{=\delta=UV^\dagger}{\underbrace{U_1 DD U_1^\dagger}} V) \oplus (U_1 D D^\dagger U_1^\dagger V)
    =U\oplus V = G

Note that the central matrix :math:`D\oplus D^\dagger` is generated by some :math:`d\oplus (-d)`,
which is an element of our choice :math:`\mathfrak{a}_{\text{A}}` above.

As for the CSD, rotations into other Cartan subalgebras can usually be performed by multiplying
:math:`K_1` and :math:`K_2` from one side, and reinterpreting the coefficients for :math:`A` in
the new Cartan subalgebra.

Recursive KAK decompositions
----------------------------

A key observation to enable the use of KAK decompositions for unitary synthesis is that one
may apply them repeatedly, or recursively.
For this, a new KAK decomposition is applied to the subgroup elements :math:`K_1, K_2` obtained
in a previous decomposition step while maintaining the Cartan subgroup element :math:`A`.
Denoting elements obtained at the :math:`k`\ th decomposition step with a superscript 
:math:`{\circ}^{(k)}`, we find for a group element :math:`G` at the third recursion level:

.. math::

    G = K^{(3)}_1 A^{(3)}_1 K^{(3)}_2 A^{(2)}_1 K^{(3)}_3 A^{(3)}_2 K^{(3)}_4 A^{(1)} K^{(3)}_5 A^{(3)}_3 K^{(3)}_6 A^{(2)}_2 K^{(3)}_7 A^{(3)}_4 K^{(3)}_4

You may already anticipate that the two decomposition types we considered above fit together
particularly well in this context: The subgroup :math:`mathcal{K}=U(2^{n-1})^{\times 2}` of a type-AIII
decomposition is exactly the total group of a type-A decomposition, and 
the subgroup :math:`mathcal{K}=U(2^{n-1})` for a type-A decomposition is a valid total
group for another type-AIII decomposition. This allows a recursion exclusively between these
two types of decompositions:

.. math:: 

    U(2^n)
    \overset{\text{AIII}}{\longrightarrow} U(2^{n-1})\times U(2^{n-1})
    \overset{\text{A}}{\longrightarrow} U(2^{n-1})
    \overset{\text{AIII}}{\longrightarrow} U(2^{n-2})\times U(2^{n-2})
    \cdots
    \overset{\text{AIII}}{\longrightarrow} U(4)\times U(4)
    \overset{\text{A}}{\longrightarrow} U(4)

This is exactly what the three unitary synthesis techniques below
implement in the form of quantum circuits!

In the following, we will make the choices of Cartan subalgebra explicit, demonstrating that
all three works realize the above recursion of type-AIII and type-A KAK decompositions, combined
with an irregular decomposition of :math:`U(4)` and/or some post-hoc optimization steps.

Khaneja-Glaser decomposition (2000)
-----------------------------------

In 2000, Khaneja and Glaser [#Khaneja_Glaser]_ demonstrated that one-qubit and two-qubit operations
are universal for quantum computation by proving that any unitary matrix can be broken down
recursively, "decoupling" one qubit at a time. Bullock later identified one part of each
recursion step to be a type-AIII KAK decomposition [#Bullock_Note]_, and Dağlı et al. added that
the second part of each step is another KAK decomposition [#Dagli_Framework]_.
Furthermore, this decomposition has inspired a series of related works, mostly searching for
variations of the recursive KAK decomposition that achieve quantum circuits with reduced CNOT counts.

The Khaneja-Glaser decomposition defines a two-qubit Cartan algebra

.. math::

    \mathfrak{a}_{\text{base}}=\{\mathbb{I}\otimes \mathbb{I}, X\otimes X, Y\otimes Y, Z\otimes Z\},

which is the Abelian algebra of diagonal matrices, rotated by the "magic basis" rotation

.. math::

    E = \frac{1}{\sqrt{2}}\begin{pmatrix}
        1 & i & 0 & 0 \\
        0 & 0 & i & 1 \\
        0 & 0 & i & -1 \\
        1 & -i & 0 & 0
    \end{pmatrix},\quad E^\dagger \mathfrak{a}_{\text{base}} E = \mathfrak{u}_{\text{diag}}(4)

we will discuss in more detail below.
For the type-AIII KAK decompositions of :math:`U(2^n)`, :math:`n\geq 3`, the Cartan subalgebra reads

.. math::

    \mathfrak{a}'_{\text{AIII}}_(n)
    =\operatorname{span}_{\mathbb{R}}
    \{X\otimes \{\mathbb{I},X\}^{\otimes n-3}\otimes \mathfrak{a}_{\text{base}}\}.

It can be obtained by rotating :math:`\mathfrak{a}_{\text{AIII}}` above from the Pauli :math:`Y`
into the Pauli :math:`X` basis on the first qubit, from the Pauli :math:`Z` into the magic basis
via :math:`E` on the last two qubits, and from the Pauli :math:`Z` into the Pauli :math:`X` basis
on the :math:`n-3` remaining qubits.

For the second part in each recursion step, the type-A Cartan decomposition, the Cartan subalgebra
reads

.. math::

    \mathfrak{a}'_{\text{A}}_(n)
    =\operatorname{span}_{\mathbb{R}}
    \{Z\otimes \{\mathbb{I},X\}^{\otimes n-3}\otimes \mathfrak{a}_{\text{base}}\}.

That is, it is the same as for the type-AIII decomposition, except for a basis change from the
Pauli :math:`X` to the Pauli :math:`Z` basis on the first qubit.

To conclude the recursion, Khaneja and Glaser break down the remaining two-qubit unitaries from
:math:`U(4)` into single-qubit gates and two-qubit gates generated by :math:`\mathfrak{a}_{\text{base}}`.
It turns out that this is a Cartan decomposition again, specified by the subgroup :math:`SO(4)` and
labeled as type AI. While :math:`SO(4)` usually is represented as real-valued :math:`4\times 4`
matrices, there is an `accidental isomorphism <https://en.wikipedia.org/wiki/Exceptional_isomorphism>`__
between :math:`SO(4)` and :math:`SU(2)\times SU(2)`, so that :math:`\mathcal{K}` can be represented
as single-qubit gates instead (one copy of :math:`SU(2)` acting on each qubit). The base algebra
:math:`\mathfrak{a}_{\text{base}}` is a valid Cartan subalgebra for this decomposition type and
representation.

Quantum Shannon decomposition (2004)
------------------------------------

The Quantum Shannon Decomposition (QSD) was introduced by Shende et al. [#Shende_QSD]_ in 2004, using
the language of multiplexers, or Select operators. The individual statements provided in
Theorems 1, 10 and 12 all are KAK decompositions, of types AIII (or AI), AIII, and A, respectively.
The authors explicitly reference Theorem 10 as cosine-sine decomposition.
As we covered those already above, we here just need to note down the Cartan subalgebras used
by the QSD, which are simpler than those used by Khaneja and Glaser and match exactly the
exemplary :math:`\mathfrak{a}_{\text{AIII}}` and :math:`\mathfrak{a}_{\text{A}}` given in the
beginning. They are captured by multiplexed single-qubit rotations about the Pauli :math:`Y`
axis and Pauli :math:`Z` axis, respectively, with the first of the qubits (on which the recursion
currently acts) used as target, and all subsequent qubits used as controls.
Concatenating these statements (Theorems 10 and 12) results in the widely used QSD (Theorem 13),
which is most easily expressed as a circuit drawing:

.. figure:: ../_static/demonstration_assets/unitary_synthesis_kak/QSD.png
   :align: center
   :width: 85%
   :alt: Quantum Shannon decomposition of the unitary group on n qubits.

You may notice that this is simply the combination of our circuit drawings for the generic
KAK decompositions of types AIII and A from earlier. It is instructive to perform the recursion
in a circuit diagram and to appreciate the circuit structure arising from the full QSD:

.. figure:: ../_static/demonstration_assets/unitary_synthesis_kak/recursive_QSD.png
   :align: center
   :width: 85%
   :alt: Recursively applied Quantum Shannon decomposition of the unitary group on n qubits.

Here, each of the simple boxes represents an arbitrary :math:`U(2^{n-2})` gate.

Before moving on, it is important to mention that the QSD achieves its CNOT counts as given in
Tab. 1 of [#Shende_QSD]_ by ultimately decomposing :math:`U(4)` with a standard 3-CNOT circuit as
used for `two-qubit synthesis <https://pennylane.ai/compilation/two-qubit-synthesis>`__, see
[#Shende_Minimal]_ by the same authors, and by applying two optimization steps, see App. A
in [#Shende_QSD]_.

Block-ZXZ decomposition (2024)
------------------------------

The third decomposition using the recursive KAK decomposition with types AIII and A is the
so-called Block-ZXZ decomposition by Krol and Al-Ars [#Krol_BlockZXZ]_.
The first steps are virtually identical to a QSD, with the small difference that the Cartan
subalgebra :math:`\mathfrak{a}_{\text{AIII}}` is rotated on the first qubit, from the Pauli
:math:`Y` into the Pauli :math:`X` basis. The subalgebra for the type-A decomposition remains
unchanged.

The key differences to the QSD lie in the transformations and optimizations applied in addition to
each type-AIII Cartan decomposition. We showcase the transformation into the correct block
structure in form of a circuit diagram:

to do

Afterwards, the block-diagonal matrices can be decomposed with the type-A decompositions, and
optimizations from the QSD can be applied, complemented by the merger of two CZ gates into
the control structure of a multiplexer (see Sec. 5 of [#Krol_BlockZXZ]_).

Gate counts
-----------

to do
"""
import pennylane as qml

######################################################################
#
#

######################################################################
#
#

######################################################################
#
#

######################################################################
#
#

######################################################################
#
#

######################################################################
#
#

######################################################################
#
#
#
#
# About the author
# ----------------
#
